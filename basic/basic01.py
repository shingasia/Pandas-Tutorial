import numpy as np
import pandas as pd


# ================================================================================================================================
# Series와 DataFrame 만들기 기본중에 기본
# ================================================================================================================================

s = pd.Series([1,3,5, np.nan, 6, 8])

# ▶▶▶ 값이 들어있는 리스트로 시리즈를 생성하면 pandas가 기본 정수 인덱스를 만들어준다

print(s)
# 0    1.0
# 1    3.0
# 2    5.0
# 3    NaN
# 4    6.0
# 5    8.0
# dtype: float64

print(F's.ndim ==> {s.ndim}, s.dtype ==> {s.dtype}, s[3] ==> {s[3]}') # s.ndim ==> 1, s.dtype ==> float64, s[3] ==> nan


# ▶▶▶ datetime 인덱스와 라벨이 붙은 칼럼들을 전달하여 DataFrame 만들기

dates = pd.date_range("20170501", periods=6)
print(repr(dates))
# DatetimeIndex(['2017-05-01', '2017-05-02', '2017-05-03', '2017-05-04',
#                '2017-05-05', '2017-05-06'],
#               dtype='datetime64[ns]', freq='D')

print(type(dates)) # <class 'pandas.core.indexes.datetimes.DatetimeIndex'>

df = pd.DataFrame(np.random.rand(6, 4), index=dates, columns=list("ABCD"))
print(df)
#                    A         B         C         D
# 2017-05-01  0.759003  0.741637  0.842137  0.339115
# 2017-05-02  0.578880  0.954581  0.971465  0.070016
# 2017-05-03  0.359449  0.776758  0.772862  0.767124
# 2017-05-04  0.412900  0.743593  0.083073  0.414766
# 2017-05-05  0.669927  0.482931  0.411832  0.477308
# 2017-05-06  0.635962  0.718430  0.684279  0.007814



# ▶▶▶ Series처럼 변환 가능한 객체의 딕셔너리를 전달하여 DataFrame 만들기
df2 = pd.DataFrame(
    {
        "A":1.0,
        "B":pd.Timestamp("20190520"),
        "C":pd.Series(1, index=list(range(4)), dtype=np.float64),
        "D":np.array([3]*4, dtype=np.int64),
        "E":pd.Categorical(["book", "car", "cup", "fruit"]),
        "F":"foo",
    }
)

print(df2)
#      A          B    C  D      E    F
# 0  1.0 2019-05-20  1.0  3   book  foo
# 1  1.0 2019-05-20  1.0  3    car  foo
# 2  1.0 2019-05-20  1.0  3    cup  foo
# 3  1.0 2019-05-20  1.0  3  fruit  foo

print(df2.dtypes)
# A           float64
# B    datetime64[ns]
# C           float64
# D             int64
# E          category
# F            object


# ================================================================================================================================
# 데이터 보여주기 기본
# ================================================================================================================================

df = pd.DataFrame(
    np.linspace(0, 1000, 500).reshape(50, 10),
    index=pd.date_range(start="2017-03-14", periods=50),
    columns=list("ABCDEFGHIJ")
)
print(df.head(10))

#                      A           B           C           D           E           F           G           H           I           J
# 2017-03-14    0.000000    2.004008    4.008016    6.012024    8.016032   10.020040   12.024048   14.028056   16.032064   18.036072
# 2017-03-15   20.040080   22.044088   24.048096   26.052104   28.056112   30.060120   32.064128   34.068136   36.072144   38.076152
# 2017-03-16   40.080160   42.084168   44.088176   46.092184   48.096192   50.100200   52.104208   54.108216   56.112224   58.116232
# 2017-03-17   60.120240   62.124248   64.128257   66.132265   68.136273   70.140281   72.144289   74.148297   76.152305   78.156313
# 2017-03-18   80.160321   82.164329   84.168337   86.172345   88.176353   90.180361   92.184369   94.188377   96.192385   98.196393
# 2017-03-19  100.200401  102.204409  104.208417  106.212425  108.216433  110.220441  112.224449  114.228457  116.232465  118.236473
# 2017-03-20  120.240481  122.244489  124.248497  126.252505  128.256513  130.260521  132.264529  134.268537  136.272545  138.276553
# 2017-03-21  140.280561  142.284569  144.288577  146.292585  148.296593  150.300601  152.304609  154.308617  156.312625  158.316633
# 2017-03-22  160.320641  162.324649  164.328657  166.332665  168.336673  170.340681  172.344689  174.348697  176.352705  178.356713
# 2017-03-23  180.360721  182.364729  184.368737  186.372745  188.376754  190.380762  192.384770  194.388778  196.392786  198.396794

print(df.tail(4))

#                      A           B           C           D           E           F           G           H           I           J
# 2017-04-29  921.843687  923.847695  925.851703  927.855711  929.859719  931.863727  933.867735  935.871743  937.875752   939.87976
# 2017-04-30  941.883768  943.887776  945.891784  947.895792  949.899800  951.903808  953.907816  955.911824  957.915832   959.91984
# 2017-05-01  961.923848  963.927856  965.931864  967.935872  969.939880  971.943888  973.947896  975.951904  977.955912   979.95992
# 2017-05-02  981.963928  983.967936  985.971944  987.975952  989.979960  991.983968  993.987976  995.991984  997.995992  1000.00000

print(repr(df.dtypes))  # dtype: object
print(repr(df.index))
# DatetimeIndex(['2017-03-14', '2017-03-15', '2017-03-16', '2017-03-17',
#                '2017-03-18', '2017-03-19', '2017-03-20', '2017-03-21',
#                '2017-03-22', '2017-03-23', '2017-03-24', '2017-03-25',
#                '2017-03-26', '2017-03-27', '2017-03-28', '2017-03-29',
#                '2017-03-30', '2017-03-31', '2017-04-01', '2017-04-02',
#                '2017-04-03', '2017-04-04', '2017-04-05', '2017-04-06',
#                '2017-04-07', '2017-04-08', '2017-04-09', '2017-04-10',
#                '2017-04-11', '2017-04-12', '2017-04-13', '2017-04-14',
#                '2017-04-15', '2017-04-16', '2017-04-17', '2017-04-18',
#                '2017-04-19', '2017-04-20', '2017-04-21', '2017-04-22',
#                '2017-04-23', '2017-04-24', '2017-04-25', '2017-04-26',
#                '2017-04-27', '2017-04-28', '2017-04-29', '2017-04-30',
#                '2017-05-01', '2017-05-02'],
#               dtype='datetime64[ns]', freq='D')

print(repr(df.columns)) # Index(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'], dtype='object')

# ▶▶▶ DataFrame.to_numpy() 메서드는 기본 데이터의 NumPy표현을 제공한다.
# DataFrame에 서로 다른 데이터 유형의 칼럼이 있으면 NumPy로 바꾸는 과정에서 무거운 계산 작업이 있을 수 있다.
# 이 것은 Pandas와 Numpy같의 근본적인 차이점으로 귀결된다.
# NumPy의 array는 전체 배열에 하나의 dtype만 가지는 반면, Pandas의 DataFrame은 칼럼당 하나의 dtype을 가진다
# DataFrame.to_numpy()를 호출하면, Pandas는 DataFrame의 모든 dtype을 보유할 수 있는 NumPy의 dtype을 찾는다
# 결국 object타입이 될 수 있고, 모든 값을 파이썬의 객체로 캐스팅 할 필요가 생긴다

print(repr(df2.to_numpy()))

# array([[1.0, Timestamp('2019-05-20 00:00:00'), 1.0, 3, 'book', 'foo'],
#        [1.0, Timestamp('2019-05-20 00:00:00'), 1.0, 3, 'car', 'foo'],
#        [1.0, Timestamp('2019-05-20 00:00:00'), 1.0, 3, 'cup', 'foo'],
#        [1.0, Timestamp('2019-05-20 00:00:00'), 1.0, 3, 'fruit', 'foo']],
#       dtype=object)

print(df.describe()) # describe()는 빠른 통계 요약을 보여준다

#                 A           B           C           D           E           F           G           H           I            J
# count   50.000000   50.000000   50.000000   50.000000   50.000000   50.000000   50.000000   50.000000   50.000000    50.000000
# mean   490.981964  492.985972  494.989980  496.993988  498.997996  501.002004  503.006012  505.010020  507.014028   509.018036
# std    292.131858  292.131858  292.131858  292.131858  292.131858  292.131858  292.131858  292.131858  292.131858   292.131858
# min      0.000000    2.004008    4.008016    6.012024    8.016032   10.020040   12.024048   14.028056   16.032064    18.036072
# 25%    245.490982  247.494990  249.498998  251.503006  253.507014  255.511022  257.515030  259.519038  261.523046   263.527054
# 50%    490.981964  492.985972  494.989980  496.993988  498.997996  501.002004  503.006012  505.010020  507.014028   509.018036
# 75%    736.472946  738.476954  740.480962  742.484970  744.488978  746.492986  748.496994  750.501002  752.505010   754.509018
# max    981.963928  983.967936  985.971944  987.975952  989.979960  991.983968  993.987976  995.991984  997.995992  1000.000000

print(df.T) # 전치행렬 처럼 index와 columns을 바꾸기

#    2017-03-14  2017-03-15  2017-03-16  2017-03-17  2017-03-18  ...  2017-04-28  2017-04-29  2017-04-30  2017-05-01   2017-05-02
# A    0.000000   20.040080   40.080160   60.120240   80.160321  ...  901.803607  921.843687  941.883768  961.923848   981.963928
# B    2.004008   22.044088   42.084168   62.124248   82.164329  ...  903.807615  923.847695  943.887776  963.927856   983.967936
# C    4.008016   24.048096   44.088176   64.128257   84.168337  ...  905.811623  925.851703  945.891784  965.931864   985.971944
# D    6.012024   26.052104   46.092184   66.132265   86.172345  ...  907.815631  927.855711  947.895792  967.935872   987.975952
# E    8.016032   28.056112   48.096192   68.136273   88.176353  ...  909.819639  929.859719  949.899800  969.939880   989.979960
# F   10.020040   30.060120   50.100200   70.140281   90.180361  ...  911.823647  931.863727  951.903808  971.943888   991.983968
# G   12.024048   32.064128   52.104208   72.144289   92.184369  ...  913.827655  933.867735  953.907816  973.947896   993.987976
# H   14.028056   34.068136   54.108216   74.148297   94.188377  ...  915.831663  935.871743  955.911824  975.951904   995.991984
# I   16.032064   36.072144   56.112224   76.152305   96.192385  ...  917.835671  937.875752  957.915832  977.955912   997.995992
# J   18.036072   38.076152   58.116232   78.156313   98.196393  ...  919.839679  939.879760  959.919840  979.959920  1000.000000


df = pd.DataFrame(
    np.arange(30).reshape(6, 5),
    index=pd.date_range(start="2021/01/01", periods=6),
    columns=['AA', 'BB', 'CC', 'DD', 'EE']
)

print(df)
#             AA  BB  CC  DD  EE
# 2021-01-01   0   1   2   3   4
# 2021-01-02   5   6   7   8   9
# 2021-01-03  10  11  12  13  14
# 2021-01-04  15  16  17  18  19
# 2021-01-05  20  21  22  23  24
# 2021-01-06  25  26  27  28  29

print(df.sort_index(axis = 1, ascending=False)) # 칼럼 순서가 바뀜
#             EE  DD  CC  BB  AA
# 2021-01-01   4   3   2   1   0
# 2021-01-02   9   8   7   6   5
# 2021-01-03  14  13  12  11  10
# 2021-01-04  19  18  17  16  15
# 2021-01-05  24  23  22  21  20
# 2021-01-06  29  28  27  26  25

print(df.sort_index(axis = 0, ascending=False))
#             AA  BB  CC  DD  EE
# 2021-01-06  25  26  27  28  29
# 2021-01-05  20  21  22  23  24
# 2021-01-04  15  16  17  18  19
# 2021-01-03  10  11  12  13  14
# 2021-01-02   5   6   7   8   9
# 2021-01-01   0   1   2   3   4

class Coffee:
    def __init__(self, price, caffeine, name): # 가격, 카페인
        self.price = price
        self.caffeine = caffeine
        self.name = name

    def __str__(self):
        return F'가격 = {self.price}, 카페인 = {self.caffeine}, 이름={self.name}'
    
    def __gt__(self, other):
        if self.price > other.price:
            return True
        else:
            return False

df = pd.DataFrame({
    'col1':[-3.56, -10.009, 0.324, -5.76],
    'col2':[12.546, 4.528, 6.003, -2.0987],
    'col3':['엄마는외계인', '나와라 꼬부기', '뉴욕 치즈케이크', '피카피카 피카츄'],
    'col4':[Coffee(4500, '200mg', '아이스 아메리카노'), Coffee(5500, '240mg', '콜드브루 아이스'), Coffee(6000, '120mg', '모카 프라푸치노'), Coffee(4900, '150mg', '바닐라 돌체라떼')]
}, index=['Row1', 'Row2', 'Row3', 'Row4'])
print(df)

#         col1     col2      col3                                  col4
# Row1  -3.560  12.5460    엄마는외계인  가격 = 4500, 카페인 = 200mg, 이름=아이스 아메리카노
# Row2 -10.009   4.5280   나와라 꼬부기   가격 = 5500, 카페인 = 240mg, 이름=콜드브루 아이스
# Row3   0.324   6.0030  뉴욕 치즈케이크   가격 = 6000, 카페인 = 120mg, 이름=모카 프라푸치노
# Row4  -5.760  -2.0987  피카피카 피카츄   가격 = 4900, 카페인 = 150mg, 이름=바닐라 돌체라떼

print(df.sort_values(by='col2'))
#         col1     col2      col3                                  col4
# Row4  -5.760  -2.0987  피카피카 피카츄   가격 = 4900, 카페인 = 150mg, 이름=바닐라 돌체라떼
# Row2 -10.009   4.5280   나와라 꼬부기   가격 = 5500, 카페인 = 240mg, 이름=콜드브루 아이스
# Row3   0.324   6.0030  뉴욕 치즈케이크   가격 = 6000, 카페인 = 120mg, 이름=모카 프라푸치노
# Row1  -3.560  12.5460    엄마는외계인  가격 = 4500, 카페인 = 200mg, 이름=아이스 아메리카노
print(df.sort_values(by='col4', ascending=False))
#         col1     col2      col3                                  col4
# Row3   0.324   6.0030  뉴욕 치즈케이크   가격 = 6000, 카페인 = 120mg, 이름=모카 프라푸치노
# Row2 -10.009   4.5280   나와라 꼬부기   가격 = 5500, 카페인 = 240mg, 이름=콜드브루 아이스
# Row4  -5.760  -2.0987  피카피카 피카츄   가격 = 4900, 카페인 = 150mg, 이름=바닐라 돌체라떼
# Row1  -3.560  12.5460    엄마는외계인  가격 = 4500, 카페인 = 200mg, 이름=아이스 아메리카노

print(df.dtypes)
# col1    float64
# col2    float64
# col3     object
# col4     object
# dtype: object





