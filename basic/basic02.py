import numpy as np
import pandas as pd

# ================================================================================================================================
# 데이터 검색 인덱싱, row 슬라이싱
# 표준 Python/Numpy는 데이터 검색, 값 설정 할 때 사용하는 표현식은 직관적이고 대화식 작업에 유용한 반면
# Pandas는 프로덕션 코드의 경우 최적화된 데이터 엑세스 방법인 .at, .iat, .loc, .iloc을 사용하는 것을 권장한다.
# ================================================================================================================================

df = pd.DataFrame(
    np.arange(0, 4*6).reshape(4, 6),
    index=['row1', 'row2', 'row3', 'row4'],
    columns=list('ABCEDF')
)
print(df)
#        A   B   C   E   D   F
# row1   0   1   2   3   4   5
# row2   6   7   8   9  10  11
# row3  12  13  14  15  16  17
# row4  18  19  20  21  22  23

print(type(df.B)) # <class 'pandas.core.series.Series'>
print(df.B) # df['B'] == df.B
# row1     1
# row2     7
# row3    13
# row4    19
# Name: B, dtype: int32

df = pd.DataFrame(
    np.linspace(-10, 10, 28).reshape(7, 4),
    index=pd.date_range('2019-05-01', '2021-10-31', periods=7),
    columns=['COL1', 'COL2', 'COL3', 'COL4']
)
print(df)
#                           COL1      COL2      COL3       COL4
# 2019-05-01 00:00:00 -10.000000 -9.259259 -8.518519  -7.777778
# 2019-09-30 08:00:00  -7.037037 -6.296296 -5.555556  -4.814815
# 2020-02-29 16:00:00  -4.074074 -3.333333 -2.592593  -1.851852
# 2020-07-31 00:00:00  -1.111111 -0.370370  0.370370   1.111111
# 2020-12-30 08:00:00   1.851852  2.592593  3.333333   4.074074
# 2021-05-31 16:00:00   4.814815  5.555556  6.296296   7.037037
# 2021-10-31 00:00:00   7.777778  8.518519  9.259259  10.000000

print(df[-1:-8:-2])
#                           COL1      COL2      COL3       COL4
# 2021-10-31 00:00:00   7.777778  8.518519  9.259259  10.000000
# 2020-12-30 08:00:00   1.851852  2.592593  3.333333   4.074074
# 2020-02-29 16:00:00  -4.074074 -3.333333 -2.592593  -1.851852
# 2019-05-01 00:00:00 -10.000000 -9.259259 -8.518519  -7.777778
print(df['2020-12-30 08:00:00':'2019-05-01 00:00:00':-1])
#                           COL1      COL2      COL3      COL4
# 2020-12-30 08:00:00   1.851852  2.592593  3.333333  4.074074
# 2020-07-31 00:00:00  -1.111111 -0.370370  0.370370  1.111111
# 2020-02-29 16:00:00  -4.074074 -3.333333 -2.592593 -1.851852
# 2019-09-30 08:00:00  -7.037037 -6.296296 -5.555556 -4.814815
# 2019-05-01 00:00:00 -10.000000 -9.259259 -8.518519 -7.777778


# ================================================================================================================================
# Selection by label
# ================================================================================================================================
df = pd.DataFrame(
    np.linspace(-10, 10, 40).reshape(5, 8),
    index=pd.date_range('2021-11-01', '2021-12-25', periods=5),
    columns=list("ABCDEFGH")
)

print(df)
#                              A         B         C  ...         F         G          H
# 2021-11-01 00:00:00 -10.000000 -9.487179 -8.974359  ... -7.435897 -6.923077  -6.410256
# 2021-11-14 12:00:00  -5.897436 -5.384615 -4.871795  ... -3.333333 -2.820513  -2.307692
# 2021-11-28 00:00:00  -1.794872 -1.282051 -0.769231  ...  0.769231  1.282051   1.794872
# 2021-12-11 12:00:00   2.307692  2.820513  3.333333  ...  4.871795  5.384615   5.897436
# 2021-12-25 00:00:00   6.410256  6.923077  7.435897  ...  8.974359  9.487179  10.000000
# [5 rows x 8 columns]

# ▶▶▶ Label로 row 가져오기 -> <class 'pandas.core.series.Series'> 타입으로 가져온다
print(df.loc['2021-11-01 00:00:00'])
# A   -10.000000
# B    -9.487179
# C    -8.974359
# D    -8.461538
# E    -7.948718
# F    -7.435897
# G    -6.923077
# H    -6.410256
# Name: 2021-11-01 00:00:00, dtype: float64
print(type(df.loc['2021-11-01 00:00:00'])) # <class 'pandas.core.series.Series'>

# ▶▶▶ Label로 여러개의 column 가져오기
print(df.loc[:, ['H', 'F', 'A']])
#                              H         F          A
# 2021-11-01 00:00:00  -6.410256 -7.435897 -10.000000
# 2021-11-14 12:00:00  -2.307692 -3.333333  -5.897436
# 2021-11-28 00:00:00   1.794872  0.769231  -1.794872
# 2021-12-11 12:00:00   5.897436  4.871795   2.307692
# 2021-12-25 00:00:00  10.000000  8.974359   6.410256

# ▶▶▶ Label로 슬라이싱 (경계 포함)
print(df.loc['2021-12-25 00:00:00':'2021-11-28 00:00:00':-1, ['A','B','C']])
#                             A         B         C
# 2021-12-25 00:00:00  6.410256  6.923077  7.435897
# 2021-12-11 12:00:00  2.307692  2.820513  3.333333
# 2021-11-28 00:00:00 -1.794872 -1.282051 -0.769231

print(df.loc['2021-11-01':'2021-12-11']) # 시:분:초(HH:MM:SS)는 생략 가능인가?
#                              A         B         C         D         E         F         G         H
# 2021-11-01 00:00:00 -10.000000 -9.487179 -8.974359 -8.461538 -7.948718 -7.435897 -6.923077 -6.410256
# 2021-11-14 12:00:00  -5.897436 -5.384615 -4.871795 -4.358974 -3.846154 -3.333333 -2.820513 -2.307692
# 2021-11-28 00:00:00  -1.794872 -1.282051 -0.769231 -0.256410  0.256410  0.769231  1.282051  1.794872
# 2021-12-11 12:00:00   2.307692  2.820513  3.333333  3.846154  4.358974  4.871795  5.384615  5.897436

# ▶▶▶ 1개의 스칼라 값 가져오기 방법 1
value = df.loc['2021-12-11', "C"]
print(F'value ==> {value}, type(value) ==> {type(value)}')
# value ==> 2021-12-11 12:00:00    3.333333
# Name: C, dtype: float64, type(value) ==> <class 'pandas.core.series.Series'>

# ▶▶▶ 1개의 스칼라 값 가져오기 방법 2
value = df.at['2021-12-11', "C"]
print(F'value ==> {value}, type(value) ==> {type(value)}')
# value ==> [3.33333333], type(value) ==> <class 'numpy.ndarray'>


# ================================================================================================================================
# Selection by position
# ================================================================================================================================
print(df.iloc[3])
# A    2.307692
# B    2.820513
# C    3.333333
# D    3.846154
# E    4.358974
# F    4.871795
# G    5.384615
# H    5.897436
# Name: 2021-12-11 12:00:00, dtype: float64


print(df.iloc[:,:]) # 전체 검색

# ▶▶▶ 인덱스로 슬라이싱
print(df.iloc[3:5, 1:6])

#                             B         C         D         E         F
# 2021-12-11 12:00:00  2.820513  3.333333  3.846154  4.358974  4.871795
# 2021-12-25 00:00:00  6.923077  7.435897  7.948718  8.461538  8.974359

print(df.iloc[::-1, ::-1]) # row, column 모두 순서 거꾸로
#                              H         G         F         E         D         C         B          A
# 2021-12-25 00:00:00  10.000000  9.487179  8.974359  8.461538  7.948718  7.435897  6.923077   6.410256
# 2021-12-11 12:00:00   5.897436  5.384615  4.871795  4.358974  3.846154  3.333333  2.820513   2.307692
# 2021-11-28 00:00:00   1.794872  1.282051  0.769231  0.256410 -0.256410 -0.769231 -1.282051  -1.794872
# 2021-11-14 12:00:00  -2.307692 -2.820513 -3.333333 -3.846154 -4.358974 -4.871795 -5.384615  -5.897436
# 2021-11-01 00:00:00  -6.410256 -6.923077 -7.435897 -7.948718 -8.461538 -8.974359 -9.487179 -10.000000

print(df.iloc[:, ::2])
#                              A         C         E         G
# 2021-11-01 00:00:00 -10.000000 -8.974359 -7.948718 -6.923077
# 2021-11-14 12:00:00  -5.897436 -4.871795 -3.846154 -2.820513
# 2021-11-28 00:00:00  -1.794872 -0.769231  0.256410  1.282051
# 2021-12-11 12:00:00   2.307692  3.333333  4.358974  5.384615
# 2021-12-25 00:00:00   6.410256  7.435897  8.461538  9.487179

print(df.iloc[[-1, 3, 2], [3, 4, 5, 6]])
#                             D         E         F         G
# 2021-12-25 00:00:00  7.948718  8.461538  8.974359  9.487179
# 2021-12-11 12:00:00  3.846154  4.358974  4.871795  5.384615
# 2021-11-28 00:00:00 -0.256410  0.256410  0.769231  1.282051


print(df.iloc[3, 3])       # 3.846153846153845
print(type(df.iloc[3, 4])) # <class 'numpy.float64'>

print(df.iat[1, 0])        # -5.897435897435898
print(type(df.iat[1, 0]))  # <class 'numpy.float64'>





