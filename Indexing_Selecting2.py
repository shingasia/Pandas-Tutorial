import numpy as np
import pandas as pd


# ==================================================================================================================================
# where() 메서드와 마스킹
# boolean 백터를 사용해 Series에서 데이터를 검색하면 일반적으로 원본 데이터와 같은 모양이 아니다(조건에 맞는 부분집합이 리턴된다)
# 검색된 데이터가 원본 데이터와 동일한 모양을 갖도록 보장하려면 Series및 DataFrame에서 where() 메서드를 사용할 수 있다.
# ==================================================================================================================================

s = pd.Series({'a': 10, 'b': -5, 'c': 3, 'd': -7, 'e':2})
print(s)        # 원본 데이터
# a    10     
# b    -5     
# c     3     
# d    -7     
# e     2     
# dtype: int64

print(s[s > 0]) # 원본 데이터와 모양이 달라진다
# a    10
# c     3
# e     2
# dtype: int64

print(s.where(s > 0)) # 이렇게 where() 메서드로 원본과 동일한 모양으로 검색 가능
# a    10.0
# b     NaN
# c     3.0
# d     NaN
# e     2.0
# dtype: float64

df = pd.DataFrame(
    np.random.randint(-1, 2, size=(8, 10)) # np.random.randint(-1, 2, 80).reshape(8, 10) 와 같다
)
df.index=map(lambda x : 'R'+str(x), [1,2,3,4,5,6,7,8,])
df.columns=map(lambda x : 'C'+str(x), [1,2,3,4,5,6,7,8,9,10])
print(df)
#     C1  C2  C3  C4  C5  C6  C7  C8  C9  C10
# R1   1  -1   0   1   1  -1   0  -1   1    0
# R2   0   1   1   1   1   1   0   0   0    0
# R3   0   1  -1   0   1   1  -1   0   0   -1
# R4   1  -1  -1   0  -1   1  -1  -1   1    0
# R5   1  -1   1  -1   1   0   1   1   0    0
# R6   0   1  -1   0   1   1   1   1   0    0
# R7   0   1   1   1  -1   1   1   1  -1   -1
# R8  -1  -1  -1  -1   1   1  -1  -1  -1    1
print(df[df < 0])            # ▶▶▶ DataFrame은 boolean 기준으로 검색하면, 원본 데이터 모양도 유지한다 이 코드는 df.where(df < 0)과 동일하다
#      C1   C2   C3   C4   C5   C6   C7   C8   C9  C10
# R1  NaN -1.0  NaN  NaN  NaN -1.0  NaN -1.0  NaN  NaN
# R2  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN
# R3  NaN  NaN -1.0  NaN  NaN  NaN -1.0  NaN  NaN -1.0
# R4  NaN -1.0 -1.0  NaN -1.0  NaN -1.0 -1.0  NaN  NaN
# R5  NaN -1.0  NaN -1.0  NaN  NaN  NaN  NaN  NaN  NaN
# R6  NaN  NaN -1.0  NaN  NaN  NaN  NaN  NaN  NaN  NaN
# R7  NaN  NaN  NaN  NaN -1.0  NaN  NaN  NaN -1.0 -1.0
# R8 -1.0 -1.0 -1.0 -1.0  NaN  NaN -1.0 -1.0 -1.0  NaN
print(df.where(df < 0, -df)) # ▶▶▶ 또한 where는 반환된 복사본에서 조건이 False인 값을 대체하기 위해 선택적으로 대체값을 인수로 줄 수 있다.
#     C1  C2  C3  C4  C5  C6  C7  C8  C9  C10
# R1  -1  -1   0  -1  -1  -1   0  -1  -1    0
# R2   0  -1  -1  -1  -1  -1   0   0   0    0
# R3   0  -1  -1   0  -1  -1  -1   0   0   -1
# R4  -1  -1  -1   0  -1  -1  -1  -1  -1    0
# R5  -1  -1  -1  -1  -1   0  -1  -1   0    0
# R6   0  -1  -1   0  -1  -1  -1  -1   0    0
# R7   0  -1  -1  -1  -1  -1  -1  -1  -1   -1
# R8  -1  -1  -1  -1  -1  -1  -1  -1  -1   -1
# 기존에 배운 applymap으로도 가능하다
def convert_minus(x):
    if x > 0 :
        return -x
    else:
        return x
    pass
print(df.applymap(convert_minus))
#     C1  C2  C3  C4  C5  C6  C7  C8  C9  C10
# R1  -1  -1   0  -1  -1  -1   0  -1  -1    0
# R2   0  -1  -1  -1  -1  -1   0   0   0    0
# R3   0  -1  -1   0  -1  -1  -1   0   0   -1
# R4  -1  -1  -1   0  -1  -1  -1  -1  -1    0
# R5  -1  -1  -1  -1  -1   0  -1  -1   0    0
# R6   0  -1  -1   0  -1  -1  -1  -1   0    0
# R7   0  -1  -1  -1  -1  -1  -1  -1  -1   -1
# R8  -1  -1  -1  -1  -1  -1  -1  -1  -1   -1


df = pd.DataFrame(
    np.arange(-40, 40, 1).reshape(8, 10),
    index=map(lambda x : 'R'+str(x), [1,2,3,4,5,6,7,8,]),
    columns=map(lambda x : 'C'+str(x), [1,2,3,4,5,6,7,8,9,10])
)
print(df)
#     C1  C2  C3  C4  C5  C6  C7  C8  C9  C10
# R1 -40 -39 -38 -37 -36 -35 -34 -33 -32  -31
# R2 -30 -29 -28 -27 -26 -25 -24 -23 -22  -21
# R3 -20 -19 -18 -17 -16 -15 -14 -13 -12  -11
# R4 -10  -9  -8  -7  -6  -5  -4  -3  -2   -1
# R5   0   1   2   3   4   5   6   7   8    9
# R6  10  11  12  13  14  15  16  17  18   19
# R7  20  21  22  23  24  25  26  27  28   29
# R8  30  31  32  33  34  35  36  37  38   39


# ▶이 예제에서는 df.where(df < 0, -df).to_numpy() == np.where(df < 0, df, -df)

print(repr(df.where(df < 0, -df)))
#     C1  C2  C3  C4  C5  C6  C7  C8  C9  C10
# R1 -40 -39 -38 -37 -36 -35 -34 -33 -32  -31
# R2 -30 -29 -28 -27 -26 -25 -24 -23 -22  -21
# R3 -20 -19 -18 -17 -16 -15 -14 -13 -12  -11
# R4 -10  -9  -8  -7  -6  -5  -4  -3  -2   -1
# R5   0  -1  -2  -3  -4  -5  -6  -7  -8   -9
# R6 -10 -11 -12 -13 -14 -15 -16 -17 -18  -19
# R7 -20 -21 -22 -23 -24 -25 -26 -27 -28  -29
# R8 -30 -31 -32 -33 -34 -35 -36 -37 -38  -39

print(repr(np.where(df < 0, df, -df)))
# array([[-40, -39, -38, -37, -36, -35, -34, -33, -32, -31],
#        [-30, -29, -28, -27, -26, -25, -24, -23, -22, -21],
#        [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11],
#        [-10,  -9,  -8,  -7,  -6,  -5,  -4,  -3,  -2,  -1],
#        [  0,  -1,  -2,  -3,  -4,  -5,  -6,  -7,  -8,  -9],
#        [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19],
#        [-20, -21, -22, -23, -24, -25, -26, -27, -28, -29],
#        [-30, -31, -32, -33, -34, -35, -36, -37, -38, -39]])

print(df.where(df > 0, df.loc['R5', 'C1'], axis='index')) # df.loc['R5', 'C1'] == 0
#     C1  C2  C3  C4  C5  C6  C7  C8  C9  C10
# R1   0   0   0   0   0   0   0   0   0    0
# R2   0   0   0   0   0   0   0   0   0    0
# R3   0   0   0   0   0   0   0   0   0    0
# R4   0   0   0   0   0   0   0   0   0    0
# R5   0   1   2   3   4   5   6   7   8    9
# R6  10  11  12  13  14  15  16  17  18   19
# R7  20  21  22  23  24  25  26  27  28   29
# R8  30  31  32  33  34  35  36  37  38   39



# ==================================================================================================================================
# query() 메서드 (아주 중요하고 편리한 메서드이다 잘 알아두자...)
# @a + b와 같이 '@' 문자를 접두사로 사용하여 환경의 변수를 참조할 수 있다
# ==================================================================================================================================
df = pd.DataFrame (
    np.arange(-10000000, 10000000, 1).reshape((2000000, -1)) # 이렇게 -1을 쓰면 columns 사이즈를 row의 개수에 따라 알아서 추론한다
)
df.index=map(lambda x : 'R'+str(x), df.index)
df.columns=map(lambda x : 'C'+str(x), df.columns)
print(df)
#                 C0       C1       C2       C3       C4       C5       C6       C7       C8       C9
# R0       -10000000 -9999999 -9999998 -9999997 -9999996 -9999995 -9999994 -9999993 -9999992 -9999991
# R1        -9999990 -9999989 -9999988 -9999987 -9999986 -9999985 -9999984 -9999983 -9999982 -9999981
# R2        -9999980 -9999979 -9999978 -9999977 -9999976 -9999975 -9999974 -9999973 -9999972 -9999971
# R3        -9999970 -9999969 -9999968 -9999967 -9999966 -9999965 -9999964 -9999963 -9999962 -9999961
# R4        -9999960 -9999959 -9999958 -9999957 -9999956 -9999955 -9999954 -9999953 -9999952 -9999951
# ...            ...      ...      ...      ...      ...      ...      ...      ...      ...      ...
# R1999995   9999950  9999951  9999952  9999953  9999954  9999955  9999956  9999957  9999958  9999959
# R1999996   9999960  9999961  9999962  9999963  9999964  9999965  9999966  9999967  9999968  9999969
# R1999997   9999970  9999971  9999972  9999973  9999974  9999975  9999976  9999977  9999978  9999979
# R1999998   9999980  9999981  9999982  9999983  9999984  9999985  9999986  9999987  9999988  9999989
# R1999999   9999990  9999991  9999992  9999993  9999994  9999995  9999996  9999997  9999998  9999999

# [2000000 rows x 10 columns]
print(len(df.index))   # 2000000
print(len(df.columns)) # 10
print(df.shape)        # (2000000, 10)
print(df.size)         # 20000000

print(df.query(R'C1 < 100000 or True')) # True 때문에 전체검색
print(df.query(R' C1 < 80000 and C6 > -5000 '))
#              C0     C1     C2     C3     C4     C5     C6     C7     C8     C9
# R999500   -5000  -4999  -4998  -4997  -4996  -4995  -4994  -4993  -4992  -4991
# R999501   -4990  -4989  -4988  -4987  -4986  -4985  -4984  -4983  -4982  -4981
# R999502   -4980  -4979  -4978  -4977  -4976  -4975  -4974  -4973  -4972  -4971
# R999503   -4970  -4969  -4968  -4967  -4966  -4965  -4964  -4963  -4962  -4961
# R999504   -4960  -4959  -4958  -4957  -4956  -4955  -4954  -4953  -4952  -4951
# ...         ...    ...    ...    ...    ...    ...    ...    ...    ...    ...
# R1007995  79950  79951  79952  79953  79954  79955  79956  79957  79958  79959
# R1007996  79960  79961  79962  79963  79964  79965  79966  79967  79968  79969
# R1007997  79970  79971  79972  79973  79974  79975  79976  79977  79978  79979
# R1007998  79980  79981  79982  79983  79984  79985  79986  79987  79988  79989
# R1007999  79990  79991  79992  79993  79994  79995  79996  79997  79998  79999

# [8500 rows x 10 columns]
print(df.query(R' 100000 < abs(C9) < 300000 '))
#               C0      C1      C2      C3      C4      C5      C6      C7      C8      C9
# R970000  -300000 -299999 -299998 -299997 -299996 -299995 -299994 -299993 -299992 -299991
# R970001  -299990 -299989 -299988 -299987 -299986 -299985 -299984 -299983 -299982 -299981
# R970002  -299980 -299979 -299978 -299977 -299976 -299975 -299974 -299973 -299972 -299971
# R970003  -299970 -299969 -299968 -299967 -299966 -299965 -299964 -299963 -299962 -299961
# R970004  -299960 -299959 -299958 -299957 -299956 -299955 -299954 -299953 -299952 -299951
# ...          ...     ...     ...     ...     ...     ...     ...     ...     ...     ...
# R1029995  299950  299951  299952  299953  299954  299955  299956  299957  299958  299959
# R1029996  299960  299961  299962  299963  299964  299965  299966  299967  299968  299969
# R1029997  299970  299971  299972  299973  299974  299975  299976  299977  299978  299979
# R1029998  299980  299981  299982  299983  299984  299985  299986  299987  299988  299989
# R1029999  299990  299991  299992  299993  299994  299995  299996  299997  299998  299999

# [40000 rows x 10 columns]

print(df.query(" C1 in [-299999, -299989, -299979, -299969, -299959, 299901, 299891] "))
#               C0      C1      C2      C3      C4      C5      C6      C7      C8      C9
# R970000  -300000 -299999 -299998 -299997 -299996 -299995 -299994 -299993 -299992 -299991
# R970001  -299990 -299989 -299988 -299987 -299986 -299985 -299984 -299983 -299982 -299981
# R970002  -299980 -299979 -299978 -299977 -299976 -299975 -299974 -299973 -299972 -299971
# R970003  -299970 -299969 -299968 -299967 -299966 -299965 -299964 -299963 -299962 -299961
# R970004  -299960 -299959 -299958 -299957 -299956 -299955 -299954 -299953 -299952 -299951
# R1029989  299890  299891  299892  299893  299894  299895  299896  299897  299898  299899
# R1029990  299900  299901  299902  299903  299904  299905  299906  299907  299908  299909


print(df[~df['C1'].isin(range(-9999979, 9999955, 10))]) # query 함수 안에서 문자열로 range를 쓸 수가 없다 그래서 이렇게 boolean 인덱싱으로...
#                 C0       C1       C2       C3       C4       C5       C6       C7       C8       C9
# R0       -10000000 -9999999 -9999998 -9999997 -9999996 -9999995 -9999994 -9999993 -9999992 -9999991
# R1        -9999990 -9999989 -9999988 -9999987 -9999986 -9999985 -9999984 -9999983 -9999982 -9999981
# R1999996   9999960  9999961  9999962  9999963  9999964  9999965  9999966  9999967  9999968  9999969
# R1999997   9999970  9999971  9999972  9999973  9999974  9999975  9999976  9999977  9999978  9999979
# R1999998   9999980  9999981  9999982  9999983  9999984  9999985  9999986  9999987  9999988  9999989
# R1999999   9999990  9999991  9999992  9999993  9999994  9999995  9999996  9999997  9999998  9999999

print(df.query(" C8 == 9999958 "))
#                C0       C1       C2       C3       C4       C5       C6       C7       C8       C9
# R1999995  9999950  9999951  9999952  9999953  9999954  9999955  9999956  9999957  9999958  9999959
print(df.query(" C6 not in [46, 56, 66, 106, 111116, 9999956, 9999966, 9999976, 9999986, 9999996] "))
#                 C0       C1       C2       C3       C4       C5       C6       C7       C8       C9
# R0       -10000000 -9999999 -9999998 -9999997 -9999996 -9999995 -9999994 -9999993 -9999992 -9999991
# R1        -9999990 -9999989 -9999988 -9999987 -9999986 -9999985 -9999984 -9999983 -9999982 -9999981
# R2        -9999980 -9999979 -9999978 -9999977 -9999976 -9999975 -9999974 -9999973 -9999972 -9999971
# R3        -9999970 -9999969 -9999968 -9999967 -9999966 -9999965 -9999964 -9999963 -9999962 -9999961
# R4        -9999960 -9999959 -9999958 -9999957 -9999956 -9999955 -9999954 -9999953 -9999952 -9999951
# ...            ...      ...      ...      ...      ...      ...      ...      ...      ...      ...
# R1999990   9999900  9999901  9999902  9999903  9999904  9999905  9999906  9999907  9999908  9999909
# R1999991   9999910  9999911  9999912  9999913  9999914  9999915  9999916  9999917  9999918  9999919
# R1999992   9999920  9999921  9999922  9999923  9999924  9999925  9999926  9999927  9999928  9999929
# R1999993   9999930  9999931  9999932  9999933  9999934  9999935  9999936  9999937  9999938  9999939
# R1999994   9999940  9999941  9999942  9999943  9999944  9999945  9999946  9999947  9999948  9999949

# [1999990 rows x 10 columns]

num = [-1000, 1000]
print(df.query(" @num[0] < C2 < @num[1] ")) # 이렇게 미리 변수를 참조할 대는 '@'를 사용한다
#             C0   C1   C2   C3   C4   C5   C6   C7   C8   C9
# R999900  -1000 -999 -998 -997 -996 -995 -994 -993 -992 -991
# R999901   -990 -989 -988 -987 -986 -985 -984 -983 -982 -981
# R999902   -980 -979 -978 -977 -976 -975 -974 -973 -972 -971
# R999903   -970 -969 -968 -967 -966 -965 -964 -963 -962 -961
# R999904   -960 -959 -958 -957 -956 -955 -954 -953 -952 -951
# ...        ...  ...  ...  ...  ...  ...  ...  ...  ...  ...
# R1000095   950  951  952  953  954  955  956  957  958  959
# R1000096   960  961  962  963  964  965  966  967  968  969
# R1000097   970  971  972  973  974  975  976  977  978  979
# R1000098   980  981  982  983  984  985  986  987  988  989
# R1000099   990  991  992  993  994  995  996  997  998  999

# [200 rows x 10 columns]
df.insert(0, "(C3^2) + C9", 0)
print(df)
#           (C3^2) + C9        C0       C1       C2       C3       C4       C5       C6       C7       C8       C9
# R0                  0 -10000000 -9999999 -9999998 -9999997 -9999996 -9999995 -9999994 -9999993 -9999992 -9999991
# R1                  0  -9999990 -9999989 -9999988 -9999987 -9999986 -9999985 -9999984 -9999983 -9999982 -9999981
# R2                  0  -9999980 -9999979 -9999978 -9999977 -9999976 -9999975 -9999974 -9999973 -9999972 -9999971
# R3                  0  -9999970 -9999969 -9999968 -9999967 -9999966 -9999965 -9999964 -9999963 -9999962 -9999961
# R4                  0  -9999960 -9999959 -9999958 -9999957 -9999956 -9999955 -9999954 -9999953 -9999952 -9999951
# ...               ...       ...      ...      ...      ...      ...      ...      ...      ...      ...      ...
# R1999995            0   9999950  9999951  9999952  9999953  9999954  9999955  9999956  9999957  9999958  9999959
# R1999996            0   9999960  9999961  9999962  9999963  9999964  9999965  9999966  9999967  9999968  9999969
# R1999997            0   9999970  9999971  9999972  9999973  9999974  9999975  9999976  9999977  9999978  9999979
# R1999998            0   9999980  9999981  9999982  9999983  9999984  9999985  9999986  9999987  9999988  9999989
# R1999999            0   9999990  9999991  9999992  9999993  9999994  9999995  9999996  9999997  9999998  9999999

# [2000000 rows x 11 columns]
print(df.dtypes)
# (C3^2) + C9    int64
# C0             int32
# C1             int32
# C2             int32
# C3             int32
# C4             int32
# C5             int32
# C6             int32
# C7             int32
# C8             int32
# C9             int32
# dtype: object

print(df.astype({"(C3^2) + C9": np.int64, "C3":np.int64}).dtypes) # (C3^2) + C9 칼럼 데이터타입을 좀더 키운다
# (C3^2) + C9    int64
# C0             int32
# C1             int32
# C2             int32
# C3             int64
# C4             int32
# C5             int32
# C6             int32
# C7             int32
# C8             int32
# C9             int32
# dtype: object
df['(C3^2) + C9'] = df['C3'].map(lambda x : x**2) + df['C9']
print(df)
#              (C3^2) + C9        C0       C1       C2       C3       C4       C5       C6       C7       C8       C9
# R0        99999930000018 -10000000 -9999999 -9999998 -9999997 -9999996 -9999995 -9999994 -9999993 -9999992 -9999991      
# R1        99999730000188  -9999990 -9999989 -9999988 -9999987 -9999986 -9999985 -9999984 -9999983 -9999982 -9999981      
# R2        99999530000558  -9999980 -9999979 -9999978 -9999977 -9999976 -9999975 -9999974 -9999973 -9999972 -9999971      
# R3        99999330001128  -9999970 -9999969 -9999968 -9999967 -9999966 -9999965 -9999964 -9999963 -9999962 -9999961      
# R4        99999130001898  -9999960 -9999959 -9999958 -9999957 -9999956 -9999955 -9999954 -9999953 -9999952 -9999951      
# ...                  ...       ...      ...      ...      ...      ...      ...      ...      ...      ...      ...      
# R1999995  99999070002168   9999950  9999951  9999952  9999953  9999954  9999955  9999956  9999957  9999958  9999959      
# R1999996  99999270001338   9999960  9999961  9999962  9999963  9999964  9999965  9999966  9999967  9999968  9999969      
# R1999997  99999470000708   9999970  9999971  9999972  9999973  9999974  9999975  9999976  9999977  9999978  9999979      
# R1999998  99999670000278   9999980  9999981  9999982  9999983  9999984  9999985  9999986  9999987  9999988  9999989      
# R1999999  99999870000048   9999990  9999991  9999992  9999993  9999994  9999995  9999996  9999997  9999998  9999999      

# [2000000 rows x 11 columns]


df.query(R'COLUMN1.isna()')        # COLUMN1 이 NaN인 데이터 조회
df.query(R'COLUMN1.isnull()')
df.query(R'not COLUMN1.isna()')    # COLUMN1 이 NaN이 아닌 데이터 조회
df.query(R'not COLUMN1.isnull()')


