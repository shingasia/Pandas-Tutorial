import numpy as np
import pandas as pd

# ================================================================================================================================
# Series
# 모든 데이터 유형을 보유할 수 있는(integers, strings, floating point numbers, Python objects, etc.) Label이 지정된 1차원 배열
# 시리즈에서 라벨은 인덱스라고 부른다
# 시리즈를 만드는 가장 기본적인 형식은 다음과 같다
# >>> s = pd.Series(data, index=index) 여기서 data는 여러가지가 될 수 있다. Python dict, ndarray, scalar value 등이 있다
# 전달된 index는 라벨 리스트이다 그래서 전달된 데이터가 무엇인지에 따라서 몇 가지 경우로 나뉜다.
# ================================================================================================================================


# ▶▶▶ From ndarray
s = pd.Series(np.random.randn(5), index=['A', 'B', 'C', 'D', 'E'])
print(s)
# A    0.681078
# B   -1.089236
# C   -0.646288
# D    0.642687
# E    0.824845
# dtype: float64

print(s.index) # Index(['A', 'B', 'C', 'D', 'E'], dtype='object')


# ▶▶▶ From ndarray
d = {100:1, 200:2, '300':3, 500: 5}
s = pd.Series(d)
print(s)
print(s[100])   # 1
print(s[200])   # 2
print(s['300']) # 3

print(s.index) # Index([100, 200, '300', 500], dtype='object')


s = pd.Series(d, index=[100, 200, '300', '400', 500])
print(s)
# 100    1.0
# 200    2.0
# 300    3.0
# 400    NaN
# 500    5.0
# dtype: float64

# ▶▶▶ NaN(not a number) 는 Pandas에서 사용하는 표준 누락 데이터 마커이다

# ▶▶▶ From scalar value
s = pd.Series(-123.4567890213, index=['A','B','C','D','E'])
print(s)
# A   -123.456789
# B   -123.456789
# C   -123.456789
# D   -123.456789
# E   -123.456789
# dtype: float64


# ================================================================================================================================
# Series는 ndarray와 유사하다
# ================================================================================================================================
s = pd.Series(np.random.randn(5), index=['A', 'B', 'C', 'D', 'E'])
print(s)
# A   -0.135854
# B    1.647397
# C   -0.055884
# D    0.482340
# E   -0.735158
# dtype: float64
print(s[0]) # -0.13585442074125909
print(s[2:])
# C   -0.055884
# D    0.482340
# E   -0.735158
# dtype: float64
print(s[::-1])
# E   -0.735158
# D    0.482340
# C   -0.055884
# B    1.647397
# A   -0.135854
# dtype: float64
print(s[s > s.median()])
# B    1.647397
# D    0.482340
# dtype: float64
print(s[[1, 3, 4]])
# B    1.647397
# D    0.482340
# E   -0.735158
# dtype: float64
print(repr(np.exp(s)))
# A    0.872970
# B    5.193446
# C    0.945648
# D    1.619860
# E    0.479430
# dtype: float64

s = pd.Series(np.random.randn(5), index=['A', 'B', 'C', 'D', 'E'])
print(s.to_numpy().__repr__()) # array([-1.12096158, -0.04957027, -0.41142721, -1.42018314, -1.23287513])


# ================================================================================================================================
# Series는 딕셔너리와 유사하다
# ================================================================================================================================
s = pd.Series(
    data = {
        '맛1':'아빠는 딸바봉',
        '맛2':'애플 민트',
        '맛3':'브라운 버터 메이플',
        '맛4':'이상한 나라의 솜사탕',
        '사이즈':'쿼터'
    }
)
print(s['맛4']) # 이상한 나라의 솜사탕
s['맛5'] = '체리쥬빌레'
print(s)
# 맛1         아빠는 딸바봉
# 맛2           애플 민트
# 맛3      브라운 버터 메이플
# 맛4     이상한 나라의 솜사탕
# 사이즈             쿼터
# 맛5           체리쥬빌레
# dtype: object

print('사이즈' in s)   # True
print('가격' not in s) # True
for k, v in s.items():
    print(k.rjust(10)+' '+v.rjust(20))

#         맛1              아빠는 딸바봉
#         맛2                애플 민트
#         맛3           브라운 버터 메이플
#         맛4          이상한 나라의 솜사탕
#        사이즈                   쿼터
#         맛5                체리쥬빌레



